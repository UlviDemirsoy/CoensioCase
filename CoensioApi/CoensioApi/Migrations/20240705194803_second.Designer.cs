// <auto-generated />
using CoensioApi.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CoensioApi.Migrations
{
    [DbContext(typeof(ApiDbContext))]
    [Migration("20240705194803_second")]
    partial class second
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CodingQuestionTest", b =>
                {
                    b.Property<int>("CodingQuestionsId")
                        .HasColumnType("integer");

                    b.Property<int>("TestsId")
                        .HasColumnType("integer");

                    b.HasKey("CodingQuestionsId", "TestsId");

                    b.HasIndex("TestsId");

                    b.ToTable("TestCodingQuestions", (string)null);
                });

            modelBuilder.Entity("CoensioApi.Data.Models.AdminUser", b =>
                {
                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.HasKey("Email");

                    b.ToTable("Admins");
                });

            modelBuilder.Entity("CoensioApi.Data.Models.CodingQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("CodeTemplate")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Input")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Output")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("CodingQuestions");
                });

            modelBuilder.Entity("CoensioApi.Data.Models.FreeTextQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("QuestionText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TrueAnswerText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("FreeTextQuestions");
                });

            modelBuilder.Entity("CoensioApi.Data.Models.MultipleChoiceQuestion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Options")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("QuestionText")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TrueAnswer")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("MultipleChoiceQuestions");
                });

            modelBuilder.Entity("CoensioApi.Data.Models.Test", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Tests");
                });

            modelBuilder.Entity("FreeTextQuestionTest", b =>
                {
                    b.Property<int>("FreeTextQuestionsId")
                        .HasColumnType("integer");

                    b.Property<int>("TestsId")
                        .HasColumnType("integer");

                    b.HasKey("FreeTextQuestionsId", "TestsId");

                    b.HasIndex("TestsId");

                    b.ToTable("TestFreeTextQuestions", (string)null);
                });

            modelBuilder.Entity("MultipleChoiceQuestionTest", b =>
                {
                    b.Property<int>("MultipleChoiceQuestionsId")
                        .HasColumnType("integer");

                    b.Property<int>("TestsId")
                        .HasColumnType("integer");

                    b.HasKey("MultipleChoiceQuestionsId", "TestsId");

                    b.HasIndex("TestsId");

                    b.ToTable("TestMultipleChoiceQuestions", (string)null);
                });

            modelBuilder.Entity("CodingQuestionTest", b =>
                {
                    b.HasOne("CoensioApi.Data.Models.CodingQuestion", null)
                        .WithMany()
                        .HasForeignKey("CodingQuestionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoensioApi.Data.Models.Test", null)
                        .WithMany()
                        .HasForeignKey("TestsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FreeTextQuestionTest", b =>
                {
                    b.HasOne("CoensioApi.Data.Models.FreeTextQuestion", null)
                        .WithMany()
                        .HasForeignKey("FreeTextQuestionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoensioApi.Data.Models.Test", null)
                        .WithMany()
                        .HasForeignKey("TestsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MultipleChoiceQuestionTest", b =>
                {
                    b.HasOne("CoensioApi.Data.Models.MultipleChoiceQuestion", null)
                        .WithMany()
                        .HasForeignKey("MultipleChoiceQuestionsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CoensioApi.Data.Models.Test", null)
                        .WithMany()
                        .HasForeignKey("TestsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
